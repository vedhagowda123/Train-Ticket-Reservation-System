AWSTemplateFormatVersion: '2010-09-09'

Description: VPC with ALB and ASG with Java 17, Maven, Git, and Tomcat with WAR deployment
 
Parameters:

  KeyName:

    Type: AWS::EC2::KeyPair::KeyName

    Description: Key pair for EC2 instances
 
Resources:

  VPC:

    Type: AWS::EC2::VPC

    Properties:

      CidrBlock: 10.0.0.0/16

      EnableDnsSupport: true

      EnableDnsHostnames: true

      Tags:

        - Key: Name

          Value: MyVPC
 
  InternetGateway:

    Type: AWS::EC2::InternetGateway
 
  AttachGateway:

    Type: AWS::EC2::VPCGatewayAttachment

    Properties:

      VpcId: !Ref VPC

      InternetGatewayId: !Ref InternetGateway
 
  PublicSubnet1:

    Type: AWS::EC2::Subnet

    Properties:

      VpcId: !Ref VPC

      CidrBlock: 10.0.1.0/24

      AvailabilityZone: !Select [ 0, !GetAZs "" ]

      MapPublicIpOnLaunch: true

      Tags:

        - Key: Name

          Value: PublicSubnet1
 
  PublicSubnet2:

    Type: AWS::EC2::Subnet

    Properties:

      VpcId: !Ref VPC

      CidrBlock: 10.0.2.0/24

      AvailabilityZone: !Select [ 1, !GetAZs "" ]

      MapPublicIpOnLaunch: true

      Tags:

        - Key: Name

          Value: PublicSubnet2
 
  RouteTable:

    Type: AWS::EC2::RouteTable

    Properties:

      VpcId: !Ref VPC
 
  PublicRoute:

    Type: AWS::EC2::Route

    Properties:

      RouteTableId: !Ref RouteTable

      DestinationCidrBlock: 0.0.0.0/0

      GatewayId: !Ref InternetGateway
 
  SubnetRouteTableAssoc1:

    Type: AWS::EC2::SubnetRouteTableAssociation

    Properties:

      SubnetId: !Ref PublicSubnet1

      RouteTableId: !Ref RouteTable
 
  SubnetRouteTableAssoc2:

    Type: AWS::EC2::SubnetRouteTableAssociation

    Properties:

      SubnetId: !Ref PublicSubnet2

      RouteTableId: !Ref RouteTable
 
  InstanceSecurityGroup:

    Type: AWS::EC2::SecurityGroup

    Properties:

      GroupDescription: Allow SSH, HTTP, HTTPS, and Tomcat HTTP (8080)

      VpcId: !Ref VPC

      SecurityGroupIngress:

        - IpProtocol: tcp

          FromPort: 22

          ToPort: 22

          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp

          FromPort: 8080

          ToPort: 8080

          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp

          FromPort: 80

          ToPort: 80

          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp

          FromPort: 443

          ToPort: 443

          CidrIp: 0.0.0.0/0
 
  LaunchTemplate:

    Type: AWS::EC2::LaunchTemplate

    Properties:

      LaunchTemplateData:

        InstanceType: t2.micro

        KeyName: !Ref KeyName

        ImageId: ami-084568db4383264d4  # Ubuntu 22.04

        SecurityGroupIds:

          - !Ref InstanceSecurityGroup

        UserData:

          Fn::Base64: |
            #!/bin/bash
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "Hello from $(hostname -f)" > /var/www/html/index.html
 
  AutoScalingGroup:

    Type: AWS::AutoScaling::AutoScalingGroup

    Properties:

      VPCZoneIdentifier:

        - !Ref PublicSubnet1

        - !Ref PublicSubnet2

      LaunchTemplate:

        LaunchTemplateId: !Ref LaunchTemplate

        Version: !GetAtt LaunchTemplate.LatestVersionNumber

      MinSize: '1'

      MaxSize: '2'

      DesiredCapacity: '1'

      TargetGroupARNs:

        - !Ref TargetGroup
 
  LoadBalancer:

    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

    Properties:

      Name: MyALB

      Subnets:

        - !Ref PublicSubnet1

        - !Ref PublicSubnet2

      SecurityGroups:

        - !Ref InstanceSecurityGroup

      Scheme: internet-facing

      Type: application

      IpAddressType: ipv4
 
  TargetGroup:

    Type: AWS::ElasticLoadBalancingV2::TargetGroup

    Properties:

      VpcId: !Ref VPC

      Port: 8080

      Protocol: HTTP

      TargetType: instance

      HealthCheckPath: /

      HealthCheckPort: traffic-port
 
  Listener:

    Type: AWS::ElasticLoadBalancingV2::Listener

    Properties:

      DefaultActions:

        - Type: forward

          TargetGroupArn: !Ref TargetGroup

      LoadBalancerArn: !Ref LoadBalancer

      Port: 80

      Protocol: HTTP
 
Outputs:

  LoadBalancerDNS:

    Description: DNS Name of the ALB

    Value: !GetAtt LoadBalancer.DNSName
